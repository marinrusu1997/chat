package main

import (
	"context"
	"fmt"
	"log"
	"os"

	"github.com/jackc/pgx/v5"

	"chat/src/postgres/gen"
)

func main() {
	// Use a context for cancellation and deadlines.
	ctx := context.Background()

	// 1. --- DATABASE CONNECTION ---
	// The connection string should be provided via an environment variable.
	// Format: postgres://user:password@host:port/dbname
	dbURL := os.Getenv("DATABASE_URL")
	if dbURL == "" {
		log.Fatal("DATABASE_URL environment variable is not set")
	}

	// Connect to the database.
	conn, err := pgx.Connect(ctx, dbURL)
	if err != nil {
		log.Fatalf("Unable to connect to database: %v\n", err)
	}
	// Defer the closing of the connection until the main function returns.
	defer conn.Close(ctx)

	fmt.Println("Successfully connected to PostgreSQL!")

	// 2. --- USING THE GENERATED QUERIES ---
	// Create a new Queries object from the generated package.
	queries := gen.New(conn)

	// 3. --- EXECUTING A QUERY ---
	// Let's create a new user. We'll use the `CreateUser` function that sqlc generated.
	// First, we create the parameters struct, also generated by sqlc.
	createUserParams := gen.CreateUserParams{
		Name:  "John Doe",
		Email: "john.doe@example.com",
		// IMPORTANT: In a real app, this would be a securely generated hash.
		PasswordHash: "a_very_long_and_secure_password_hash_that_is_at_least_50_chars",
		PasswordAlgo: 1, // Example algorithm ID
	}

	fmt.Printf("Creating user '%s'...\n", createUserParams.Name)

	// Call the generated method.
	newUser, err := queries.CreateUser(ctx, createUserParams)
	if err != nil {
		// This will catch errors like a duplicate email address if the unique constraint is violated.
		log.Fatalf("Failed to create user: %v\n", err)
	}

	// 4. --- PRINTING THE RESULT ---
	// The 'newUser' variable is a type-safe struct matching your database schema.
	fmt.Println("User created successfully!")
	fmt.Printf("ID:        %d\n", newUser.ID)
	fmt.Printf("Name:      %s\n", newUser.Name)
	fmt.Printf("Email:     %s\n", newUser.Email)
	fmt.Printf("CreatedAt: %s\n", newUser.CreatedAt.Time.String())
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0

package gen

import (
	"database/sql/driver"
	"fmt"
	"net/netip"

	"github.com/jackc/pgx/v5/pgtype"
)

type ChatEncryptionEnum string

const (
	ChatEncryptionEnumAtRest   ChatEncryptionEnum = "at_rest"
	ChatEncryptionEnumEndToEnd ChatEncryptionEnum = "end_to_end"
)

func (e *ChatEncryptionEnum) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ChatEncryptionEnum(s)
	case string:
		*e = ChatEncryptionEnum(s)
	default:
		return fmt.Errorf("unsupported scan type for ChatEncryptionEnum: %T", src)
	}
	return nil
}

type NullChatEncryptionEnum struct {
	ChatEncryptionEnum ChatEncryptionEnum `json:"chat_encryption_enum"`
	Valid              bool               `json:"valid"` // Valid is true if ChatEncryptionEnum is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullChatEncryptionEnum) Scan(value interface{}) error {
	if value == nil {
		ns.ChatEncryptionEnum, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ChatEncryptionEnum.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullChatEncryptionEnum) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ChatEncryptionEnum), nil
}

type ChatModerationPolicyEnum string

const (
	ChatModerationPolicyEnumNone          ChatModerationPolicyEnum = "none"
	ChatModerationPolicyEnumFlaggedReview ChatModerationPolicyEnum = "flagged_review"
	ChatModerationPolicyEnumAutoDelete    ChatModerationPolicyEnum = "auto_delete"
)

func (e *ChatModerationPolicyEnum) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ChatModerationPolicyEnum(s)
	case string:
		*e = ChatModerationPolicyEnum(s)
	default:
		return fmt.Errorf("unsupported scan type for ChatModerationPolicyEnum: %T", src)
	}
	return nil
}

type NullChatModerationPolicyEnum struct {
	ChatModerationPolicyEnum ChatModerationPolicyEnum `json:"chat_moderation_policy_enum"`
	Valid                    bool                     `json:"valid"` // Valid is true if ChatModerationPolicyEnum is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullChatModerationPolicyEnum) Scan(value interface{}) error {
	if value == nil {
		ns.ChatModerationPolicyEnum, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ChatModerationPolicyEnum.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullChatModerationPolicyEnum) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ChatModerationPolicyEnum), nil
}

type ChatParticipantBanReasonEnum string

const (
	ChatParticipantBanReasonEnumSpam            ChatParticipantBanReasonEnum = "spam"
	ChatParticipantBanReasonEnumAbuse           ChatParticipantBanReasonEnum = "abuse"
	ChatParticipantBanReasonEnumHarassment      ChatParticipantBanReasonEnum = "harassment"
	ChatParticipantBanReasonEnumScam            ChatParticipantBanReasonEnum = "scam"
	ChatParticipantBanReasonEnumPolicyViolation ChatParticipantBanReasonEnum = "policy_violation"
	ChatParticipantBanReasonEnumOther           ChatParticipantBanReasonEnum = "other"
)

func (e *ChatParticipantBanReasonEnum) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ChatParticipantBanReasonEnum(s)
	case string:
		*e = ChatParticipantBanReasonEnum(s)
	default:
		return fmt.Errorf("unsupported scan type for ChatParticipantBanReasonEnum: %T", src)
	}
	return nil
}

type NullChatParticipantBanReasonEnum struct {
	ChatParticipantBanReasonEnum ChatParticipantBanReasonEnum `json:"chat_participant_ban_reason_enum"`
	Valid                        bool                         `json:"valid"` // Valid is true if ChatParticipantBanReasonEnum is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullChatParticipantBanReasonEnum) Scan(value interface{}) error {
	if value == nil {
		ns.ChatParticipantBanReasonEnum, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ChatParticipantBanReasonEnum.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullChatParticipantBanReasonEnum) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ChatParticipantBanReasonEnum), nil
}

type ChatParticipantBanTypeEnum string

const (
	ChatParticipantBanTypeEnumTemporary ChatParticipantBanTypeEnum = "temporary"
	ChatParticipantBanTypeEnumPermanent ChatParticipantBanTypeEnum = "permanent"
	ChatParticipantBanTypeEnumShadow    ChatParticipantBanTypeEnum = "shadow"
)

func (e *ChatParticipantBanTypeEnum) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ChatParticipantBanTypeEnum(s)
	case string:
		*e = ChatParticipantBanTypeEnum(s)
	default:
		return fmt.Errorf("unsupported scan type for ChatParticipantBanTypeEnum: %T", src)
	}
	return nil
}

type NullChatParticipantBanTypeEnum struct {
	ChatParticipantBanTypeEnum ChatParticipantBanTypeEnum `json:"chat_participant_ban_type_enum"`
	Valid                      bool                       `json:"valid"` // Valid is true if ChatParticipantBanTypeEnum is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullChatParticipantBanTypeEnum) Scan(value interface{}) error {
	if value == nil {
		ns.ChatParticipantBanTypeEnum, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ChatParticipantBanTypeEnum.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullChatParticipantBanTypeEnum) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ChatParticipantBanTypeEnum), nil
}

type ChatParticipantNotificationLevelEnum string

const (
	ChatParticipantNotificationLevelEnumAll           ChatParticipantNotificationLevelEnum = "all"
	ChatParticipantNotificationLevelEnumMentionsOnly  ChatParticipantNotificationLevelEnum = "mentions_only"
	ChatParticipantNotificationLevelEnumImportantOnly ChatParticipantNotificationLevelEnum = "important_only"
	ChatParticipantNotificationLevelEnumNone          ChatParticipantNotificationLevelEnum = "none"
)

func (e *ChatParticipantNotificationLevelEnum) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ChatParticipantNotificationLevelEnum(s)
	case string:
		*e = ChatParticipantNotificationLevelEnum(s)
	default:
		return fmt.Errorf("unsupported scan type for ChatParticipantNotificationLevelEnum: %T", src)
	}
	return nil
}

type NullChatParticipantNotificationLevelEnum struct {
	ChatParticipantNotificationLevelEnum ChatParticipantNotificationLevelEnum `json:"chat_participant_notification_level_enum"`
	Valid                                bool                                 `json:"valid"` // Valid is true if ChatParticipantNotificationLevelEnum is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullChatParticipantNotificationLevelEnum) Scan(value interface{}) error {
	if value == nil {
		ns.ChatParticipantNotificationLevelEnum, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ChatParticipantNotificationLevelEnum.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullChatParticipantNotificationLevelEnum) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ChatParticipantNotificationLevelEnum), nil
}

type ChatParticipantRoleEnum string

const (
	ChatParticipantRoleEnumOwner     ChatParticipantRoleEnum = "owner"
	ChatParticipantRoleEnumAdmin     ChatParticipantRoleEnum = "admin"
	ChatParticipantRoleEnumModerator ChatParticipantRoleEnum = "moderator"
	ChatParticipantRoleEnumMember    ChatParticipantRoleEnum = "member"
	ChatParticipantRoleEnumGuest     ChatParticipantRoleEnum = "guest"
	ChatParticipantRoleEnumBot       ChatParticipantRoleEnum = "bot"
)

func (e *ChatParticipantRoleEnum) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ChatParticipantRoleEnum(s)
	case string:
		*e = ChatParticipantRoleEnum(s)
	default:
		return fmt.Errorf("unsupported scan type for ChatParticipantRoleEnum: %T", src)
	}
	return nil
}

type NullChatParticipantRoleEnum struct {
	ChatParticipantRoleEnum ChatParticipantRoleEnum `json:"chat_participant_role_enum"`
	Valid                   bool                    `json:"valid"` // Valid is true if ChatParticipantRoleEnum is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullChatParticipantRoleEnum) Scan(value interface{}) error {
	if value == nil {
		ns.ChatParticipantRoleEnum, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ChatParticipantRoleEnum.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullChatParticipantRoleEnum) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ChatParticipantRoleEnum), nil
}

type ChatPostPolicyEnum string

const (
	ChatPostPolicyEnumAll    ChatPostPolicyEnum = "all"
	ChatPostPolicyEnumAdmins ChatPostPolicyEnum = "admins"
	ChatPostPolicyEnumOwner  ChatPostPolicyEnum = "owner"
)

func (e *ChatPostPolicyEnum) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ChatPostPolicyEnum(s)
	case string:
		*e = ChatPostPolicyEnum(s)
	default:
		return fmt.Errorf("unsupported scan type for ChatPostPolicyEnum: %T", src)
	}
	return nil
}

type NullChatPostPolicyEnum struct {
	ChatPostPolicyEnum ChatPostPolicyEnum `json:"chat_post_policy_enum"`
	Valid              bool               `json:"valid"` // Valid is true if ChatPostPolicyEnum is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullChatPostPolicyEnum) Scan(value interface{}) error {
	if value == nil {
		ns.ChatPostPolicyEnum, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ChatPostPolicyEnum.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullChatPostPolicyEnum) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ChatPostPolicyEnum), nil
}

type ChatStatusEnum string

const (
	ChatStatusEnumActive   ChatStatusEnum = "active"
	ChatStatusEnumArchived ChatStatusEnum = "archived"
	ChatStatusEnumLocked   ChatStatusEnum = "locked"
)

func (e *ChatStatusEnum) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ChatStatusEnum(s)
	case string:
		*e = ChatStatusEnum(s)
	default:
		return fmt.Errorf("unsupported scan type for ChatStatusEnum: %T", src)
	}
	return nil
}

type NullChatStatusEnum struct {
	ChatStatusEnum ChatStatusEnum `json:"chat_status_enum"`
	Valid          bool           `json:"valid"` // Valid is true if ChatStatusEnum is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullChatStatusEnum) Scan(value interface{}) error {
	if value == nil {
		ns.ChatStatusEnum, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ChatStatusEnum.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullChatStatusEnum) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ChatStatusEnum), nil
}

type ChatTypeEnum string

const (
	ChatTypeEnumDirect ChatTypeEnum = "direct"
	ChatTypeEnumGroup  ChatTypeEnum = "group"
	ChatTypeEnumSelf   ChatTypeEnum = "self"
	ChatTypeEnumThread ChatTypeEnum = "thread"
)

func (e *ChatTypeEnum) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ChatTypeEnum(s)
	case string:
		*e = ChatTypeEnum(s)
	default:
		return fmt.Errorf("unsupported scan type for ChatTypeEnum: %T", src)
	}
	return nil
}

type NullChatTypeEnum struct {
	ChatTypeEnum ChatTypeEnum `json:"chat_type_enum"`
	Valid        bool         `json:"valid"` // Valid is true if ChatTypeEnum is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullChatTypeEnum) Scan(value interface{}) error {
	if value == nil {
		ns.ChatTypeEnum, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ChatTypeEnum.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullChatTypeEnum) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ChatTypeEnum), nil
}

type ChatVisibilityEnum string

const (
	ChatVisibilityEnumPublic  ChatVisibilityEnum = "public"
	ChatVisibilityEnumPrivate ChatVisibilityEnum = "private"
	ChatVisibilityEnumSecret  ChatVisibilityEnum = "secret"
)

func (e *ChatVisibilityEnum) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ChatVisibilityEnum(s)
	case string:
		*e = ChatVisibilityEnum(s)
	default:
		return fmt.Errorf("unsupported scan type for ChatVisibilityEnum: %T", src)
	}
	return nil
}

type NullChatVisibilityEnum struct {
	ChatVisibilityEnum ChatVisibilityEnum `json:"chat_visibility_enum"`
	Valid              bool               `json:"valid"` // Valid is true if ChatVisibilityEnum is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullChatVisibilityEnum) Scan(value interface{}) error {
	if value == nil {
		ns.ChatVisibilityEnum, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ChatVisibilityEnum.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullChatVisibilityEnum) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ChatVisibilityEnum), nil
}

type ChattingDeviceRoleEnum string

const (
	ChattingDeviceRoleEnumPrimary   ChattingDeviceRoleEnum = "primary"
	ChattingDeviceRoleEnumSecondary ChattingDeviceRoleEnum = "secondary"
	ChattingDeviceRoleEnumReadOnly  ChattingDeviceRoleEnum = "read_only"
	ChattingDeviceRoleEnumBot       ChattingDeviceRoleEnum = "bot"
	ChattingDeviceRoleEnumEphemeral ChattingDeviceRoleEnum = "ephemeral"
)

func (e *ChattingDeviceRoleEnum) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ChattingDeviceRoleEnum(s)
	case string:
		*e = ChattingDeviceRoleEnum(s)
	default:
		return fmt.Errorf("unsupported scan type for ChattingDeviceRoleEnum: %T", src)
	}
	return nil
}

type NullChattingDeviceRoleEnum struct {
	ChattingDeviceRoleEnum ChattingDeviceRoleEnum `json:"chatting_device_role_enum"`
	Valid                  bool                   `json:"valid"` // Valid is true if ChattingDeviceRoleEnum is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullChattingDeviceRoleEnum) Scan(value interface{}) error {
	if value == nil {
		ns.ChattingDeviceRoleEnum, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ChattingDeviceRoleEnum.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullChattingDeviceRoleEnum) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ChattingDeviceRoleEnum), nil
}

type Chat struct {
	ID               pgtype.UUID              `json:"id"`
	Type             ChatTypeEnum             `json:"type"`
	Visibility       ChatVisibilityEnum       `json:"visibility"`
	PostPolicy       ChatPostPolicyEnum       `json:"post_policy"`
	Status           ChatStatusEnum           `json:"status"`
	ModerationPolicy ChatModerationPolicyEnum `json:"moderation_policy"`
	Encryption       ChatEncryptionEnum       `json:"encryption"`
	Name             pgtype.Text              `json:"name"`
	NameFts          interface{}              `json:"name_fts"`
	Tags             []string                 `json:"tags"`
	Topic            pgtype.Text              `json:"topic"`
	Description      pgtype.Text              `json:"description"`
	Settings         []byte                   `json:"settings"`
	CreatedBy        pgtype.UUID              `json:"created_by"`
	CreatedAt        pgtype.Timestamptz       `json:"created_at"`
	ParentID         pgtype.UUID              `json:"parent_id"`
	ExpiresAt        pgtype.Timestamptz       `json:"expires_at"`
	ThreadsEnabled   bool                     `json:"threads_enabled"`
}

type Chat0 struct {
	ID               pgtype.UUID              `json:"id"`
	Type             ChatTypeEnum             `json:"type"`
	Visibility       ChatVisibilityEnum       `json:"visibility"`
	PostPolicy       ChatPostPolicyEnum       `json:"post_policy"`
	Status           ChatStatusEnum           `json:"status"`
	ModerationPolicy ChatModerationPolicyEnum `json:"moderation_policy"`
	Encryption       ChatEncryptionEnum       `json:"encryption"`
	Name             pgtype.Text              `json:"name"`
	NameFts          interface{}              `json:"name_fts"`
	Tags             []string                 `json:"tags"`
	Topic            pgtype.Text              `json:"topic"`
	Description      pgtype.Text              `json:"description"`
	Settings         []byte                   `json:"settings"`
	CreatedBy        pgtype.UUID              `json:"created_by"`
	CreatedAt        pgtype.Timestamptz       `json:"created_at"`
	ParentID         pgtype.UUID              `json:"parent_id"`
	ExpiresAt        pgtype.Timestamptz       `json:"expires_at"`
	ThreadsEnabled   bool                     `json:"threads_enabled"`
}

type Chat1 struct {
	ID               pgtype.UUID              `json:"id"`
	Type             ChatTypeEnum             `json:"type"`
	Visibility       ChatVisibilityEnum       `json:"visibility"`
	PostPolicy       ChatPostPolicyEnum       `json:"post_policy"`
	Status           ChatStatusEnum           `json:"status"`
	ModerationPolicy ChatModerationPolicyEnum `json:"moderation_policy"`
	Encryption       ChatEncryptionEnum       `json:"encryption"`
	Name             pgtype.Text              `json:"name"`
	NameFts          interface{}              `json:"name_fts"`
	Tags             []string                 `json:"tags"`
	Topic            pgtype.Text              `json:"topic"`
	Description      pgtype.Text              `json:"description"`
	Settings         []byte                   `json:"settings"`
	CreatedBy        pgtype.UUID              `json:"created_by"`
	CreatedAt        pgtype.Timestamptz       `json:"created_at"`
	ParentID         pgtype.UUID              `json:"parent_id"`
	ExpiresAt        pgtype.Timestamptz       `json:"expires_at"`
	ThreadsEnabled   bool                     `json:"threads_enabled"`
}

type Chat2 struct {
	ID               pgtype.UUID              `json:"id"`
	Type             ChatTypeEnum             `json:"type"`
	Visibility       ChatVisibilityEnum       `json:"visibility"`
	PostPolicy       ChatPostPolicyEnum       `json:"post_policy"`
	Status           ChatStatusEnum           `json:"status"`
	ModerationPolicy ChatModerationPolicyEnum `json:"moderation_policy"`
	Encryption       ChatEncryptionEnum       `json:"encryption"`
	Name             pgtype.Text              `json:"name"`
	NameFts          interface{}              `json:"name_fts"`
	Tags             []string                 `json:"tags"`
	Topic            pgtype.Text              `json:"topic"`
	Description      pgtype.Text              `json:"description"`
	Settings         []byte                   `json:"settings"`
	CreatedBy        pgtype.UUID              `json:"created_by"`
	CreatedAt        pgtype.Timestamptz       `json:"created_at"`
	ParentID         pgtype.UUID              `json:"parent_id"`
	ExpiresAt        pgtype.Timestamptz       `json:"expires_at"`
	ThreadsEnabled   bool                     `json:"threads_enabled"`
}

type Chat3 struct {
	ID               pgtype.UUID              `json:"id"`
	Type             ChatTypeEnum             `json:"type"`
	Visibility       ChatVisibilityEnum       `json:"visibility"`
	PostPolicy       ChatPostPolicyEnum       `json:"post_policy"`
	Status           ChatStatusEnum           `json:"status"`
	ModerationPolicy ChatModerationPolicyEnum `json:"moderation_policy"`
	Encryption       ChatEncryptionEnum       `json:"encryption"`
	Name             pgtype.Text              `json:"name"`
	NameFts          interface{}              `json:"name_fts"`
	Tags             []string                 `json:"tags"`
	Topic            pgtype.Text              `json:"topic"`
	Description      pgtype.Text              `json:"description"`
	Settings         []byte                   `json:"settings"`
	CreatedBy        pgtype.UUID              `json:"created_by"`
	CreatedAt        pgtype.Timestamptz       `json:"created_at"`
	ParentID         pgtype.UUID              `json:"parent_id"`
	ExpiresAt        pgtype.Timestamptz       `json:"expires_at"`
	ThreadsEnabled   bool                     `json:"threads_enabled"`
}

type Chat4 struct {
	ID               pgtype.UUID              `json:"id"`
	Type             ChatTypeEnum             `json:"type"`
	Visibility       ChatVisibilityEnum       `json:"visibility"`
	PostPolicy       ChatPostPolicyEnum       `json:"post_policy"`
	Status           ChatStatusEnum           `json:"status"`
	ModerationPolicy ChatModerationPolicyEnum `json:"moderation_policy"`
	Encryption       ChatEncryptionEnum       `json:"encryption"`
	Name             pgtype.Text              `json:"name"`
	NameFts          interface{}              `json:"name_fts"`
	Tags             []string                 `json:"tags"`
	Topic            pgtype.Text              `json:"topic"`
	Description      pgtype.Text              `json:"description"`
	Settings         []byte                   `json:"settings"`
	CreatedBy        pgtype.UUID              `json:"created_by"`
	CreatedAt        pgtype.Timestamptz       `json:"created_at"`
	ParentID         pgtype.UUID              `json:"parent_id"`
	ExpiresAt        pgtype.Timestamptz       `json:"expires_at"`
	ThreadsEnabled   bool                     `json:"threads_enabled"`
}

type Chat5 struct {
	ID               pgtype.UUID              `json:"id"`
	Type             ChatTypeEnum             `json:"type"`
	Visibility       ChatVisibilityEnum       `json:"visibility"`
	PostPolicy       ChatPostPolicyEnum       `json:"post_policy"`
	Status           ChatStatusEnum           `json:"status"`
	ModerationPolicy ChatModerationPolicyEnum `json:"moderation_policy"`
	Encryption       ChatEncryptionEnum       `json:"encryption"`
	Name             pgtype.Text              `json:"name"`
	NameFts          interface{}              `json:"name_fts"`
	Tags             []string                 `json:"tags"`
	Topic            pgtype.Text              `json:"topic"`
	Description      pgtype.Text              `json:"description"`
	Settings         []byte                   `json:"settings"`
	CreatedBy        pgtype.UUID              `json:"created_by"`
	CreatedAt        pgtype.Timestamptz       `json:"created_at"`
	ParentID         pgtype.UUID              `json:"parent_id"`
	ExpiresAt        pgtype.Timestamptz       `json:"expires_at"`
	ThreadsEnabled   bool                     `json:"threads_enabled"`
}

type Chat6 struct {
	ID               pgtype.UUID              `json:"id"`
	Type             ChatTypeEnum             `json:"type"`
	Visibility       ChatVisibilityEnum       `json:"visibility"`
	PostPolicy       ChatPostPolicyEnum       `json:"post_policy"`
	Status           ChatStatusEnum           `json:"status"`
	ModerationPolicy ChatModerationPolicyEnum `json:"moderation_policy"`
	Encryption       ChatEncryptionEnum       `json:"encryption"`
	Name             pgtype.Text              `json:"name"`
	NameFts          interface{}              `json:"name_fts"`
	Tags             []string                 `json:"tags"`
	Topic            pgtype.Text              `json:"topic"`
	Description      pgtype.Text              `json:"description"`
	Settings         []byte                   `json:"settings"`
	CreatedBy        pgtype.UUID              `json:"created_by"`
	CreatedAt        pgtype.Timestamptz       `json:"created_at"`
	ParentID         pgtype.UUID              `json:"parent_id"`
	ExpiresAt        pgtype.Timestamptz       `json:"expires_at"`
	ThreadsEnabled   bool                     `json:"threads_enabled"`
}

type Chat7 struct {
	ID               pgtype.UUID              `json:"id"`
	Type             ChatTypeEnum             `json:"type"`
	Visibility       ChatVisibilityEnum       `json:"visibility"`
	PostPolicy       ChatPostPolicyEnum       `json:"post_policy"`
	Status           ChatStatusEnum           `json:"status"`
	ModerationPolicy ChatModerationPolicyEnum `json:"moderation_policy"`
	Encryption       ChatEncryptionEnum       `json:"encryption"`
	Name             pgtype.Text              `json:"name"`
	NameFts          interface{}              `json:"name_fts"`
	Tags             []string                 `json:"tags"`
	Topic            pgtype.Text              `json:"topic"`
	Description      pgtype.Text              `json:"description"`
	Settings         []byte                   `json:"settings"`
	CreatedBy        pgtype.UUID              `json:"created_by"`
	CreatedAt        pgtype.Timestamptz       `json:"created_at"`
	ParentID         pgtype.UUID              `json:"parent_id"`
	ExpiresAt        pgtype.Timestamptz       `json:"expires_at"`
	ThreadsEnabled   bool                     `json:"threads_enabled"`
}

type ChatDekHistory struct {
	ID           pgtype.UUID                      `json:"id"`
	ChatID       pgtype.UUID                      `json:"chat_id"`
	EncryptedDek []byte                           `json:"encrypted_dek"`
	DekVersion   int16                            `json:"dek_version"`
	ValidFrom    pgtype.Timestamptz               `json:"valid_from"`
	ValidTo      pgtype.Timestamptz               `json:"valid_to"`
	ValidRange   pgtype.Range[pgtype.Timestamptz] `json:"valid_range"`
}

type ChatParticipant struct {
	ChatID              pgtype.UUID                          `json:"chat_id"`
	UserID              pgtype.UUID                          `json:"user_id"`
	ChatType            ChatTypeEnum                         `json:"chat_type"`
	Role                ChatParticipantRoleEnum              `json:"role"`
	PermissionsBitmask  pgtype.Bits                          `json:"permissions_bitmask"`
	JoinedAt            pgtype.Timestamptz                   `json:"joined_at"`
	RejoinedAt          pgtype.Timestamptz                   `json:"rejoined_at"`
	LeftAt              pgtype.Timestamptz                   `json:"left_at"`
	BanReason           NullChatParticipantBanReasonEnum     `json:"ban_reason"`
	BanType             NullChatParticipantBanTypeEnum       `json:"ban_type"`
	BannedBy            pgtype.UUID                          `json:"banned_by"`
	BannedUntil         pgtype.Timestamptz                   `json:"banned_until"`
	BanReasonNote       pgtype.Text                          `json:"ban_reason_note"`
	InvitedBy           pgtype.UUID                          `json:"invited_by"`
	InvitedAt           pgtype.Timestamptz                   `json:"invited_at"`
	MutedUntil          pgtype.Timestamptz                   `json:"muted_until"`
	NotificationLevel   ChatParticipantNotificationLevelEnum `json:"notification_level"`
	CustomNickname      pgtype.Text                          `json:"custom_nickname"`
	ColorTheme          pgtype.Text                          `json:"color_theme"`
	Settings            []byte                               `json:"settings"`
	IsPinned            bool                                 `json:"is_pinned"`
	LastPinnedMessageID pgtype.UUID                          `json:"last_pinned_message_id"`
}

type ChatParticipant0 struct {
	ChatID              pgtype.UUID                          `json:"chat_id"`
	UserID              pgtype.UUID                          `json:"user_id"`
	ChatType            ChatTypeEnum                         `json:"chat_type"`
	Role                ChatParticipantRoleEnum              `json:"role"`
	PermissionsBitmask  pgtype.Bits                          `json:"permissions_bitmask"`
	JoinedAt            pgtype.Timestamptz                   `json:"joined_at"`
	RejoinedAt          pgtype.Timestamptz                   `json:"rejoined_at"`
	LeftAt              pgtype.Timestamptz                   `json:"left_at"`
	BanReason           NullChatParticipantBanReasonEnum     `json:"ban_reason"`
	BanType             NullChatParticipantBanTypeEnum       `json:"ban_type"`
	BannedBy            pgtype.UUID                          `json:"banned_by"`
	BannedUntil         pgtype.Timestamptz                   `json:"banned_until"`
	BanReasonNote       pgtype.Text                          `json:"ban_reason_note"`
	InvitedBy           pgtype.UUID                          `json:"invited_by"`
	InvitedAt           pgtype.Timestamptz                   `json:"invited_at"`
	MutedUntil          pgtype.Timestamptz                   `json:"muted_until"`
	NotificationLevel   ChatParticipantNotificationLevelEnum `json:"notification_level"`
	CustomNickname      pgtype.Text                          `json:"custom_nickname"`
	ColorTheme          pgtype.Text                          `json:"color_theme"`
	Settings            []byte                               `json:"settings"`
	IsPinned            bool                                 `json:"is_pinned"`
	LastPinnedMessageID pgtype.UUID                          `json:"last_pinned_message_id"`
}

type ChatParticipant1 struct {
	ChatID              pgtype.UUID                          `json:"chat_id"`
	UserID              pgtype.UUID                          `json:"user_id"`
	ChatType            ChatTypeEnum                         `json:"chat_type"`
	Role                ChatParticipantRoleEnum              `json:"role"`
	PermissionsBitmask  pgtype.Bits                          `json:"permissions_bitmask"`
	JoinedAt            pgtype.Timestamptz                   `json:"joined_at"`
	RejoinedAt          pgtype.Timestamptz                   `json:"rejoined_at"`
	LeftAt              pgtype.Timestamptz                   `json:"left_at"`
	BanReason           NullChatParticipantBanReasonEnum     `json:"ban_reason"`
	BanType             NullChatParticipantBanTypeEnum       `json:"ban_type"`
	BannedBy            pgtype.UUID                          `json:"banned_by"`
	BannedUntil         pgtype.Timestamptz                   `json:"banned_until"`
	BanReasonNote       pgtype.Text                          `json:"ban_reason_note"`
	InvitedBy           pgtype.UUID                          `json:"invited_by"`
	InvitedAt           pgtype.Timestamptz                   `json:"invited_at"`
	MutedUntil          pgtype.Timestamptz                   `json:"muted_until"`
	NotificationLevel   ChatParticipantNotificationLevelEnum `json:"notification_level"`
	CustomNickname      pgtype.Text                          `json:"custom_nickname"`
	ColorTheme          pgtype.Text                          `json:"color_theme"`
	Settings            []byte                               `json:"settings"`
	IsPinned            bool                                 `json:"is_pinned"`
	LastPinnedMessageID pgtype.UUID                          `json:"last_pinned_message_id"`
}

type ChatParticipant10 struct {
	ChatID              pgtype.UUID                          `json:"chat_id"`
	UserID              pgtype.UUID                          `json:"user_id"`
	ChatType            ChatTypeEnum                         `json:"chat_type"`
	Role                ChatParticipantRoleEnum              `json:"role"`
	PermissionsBitmask  pgtype.Bits                          `json:"permissions_bitmask"`
	JoinedAt            pgtype.Timestamptz                   `json:"joined_at"`
	RejoinedAt          pgtype.Timestamptz                   `json:"rejoined_at"`
	LeftAt              pgtype.Timestamptz                   `json:"left_at"`
	BanReason           NullChatParticipantBanReasonEnum     `json:"ban_reason"`
	BanType             NullChatParticipantBanTypeEnum       `json:"ban_type"`
	BannedBy            pgtype.UUID                          `json:"banned_by"`
	BannedUntil         pgtype.Timestamptz                   `json:"banned_until"`
	BanReasonNote       pgtype.Text                          `json:"ban_reason_note"`
	InvitedBy           pgtype.UUID                          `json:"invited_by"`
	InvitedAt           pgtype.Timestamptz                   `json:"invited_at"`
	MutedUntil          pgtype.Timestamptz                   `json:"muted_until"`
	NotificationLevel   ChatParticipantNotificationLevelEnum `json:"notification_level"`
	CustomNickname      pgtype.Text                          `json:"custom_nickname"`
	ColorTheme          pgtype.Text                          `json:"color_theme"`
	Settings            []byte                               `json:"settings"`
	IsPinned            bool                                 `json:"is_pinned"`
	LastPinnedMessageID pgtype.UUID                          `json:"last_pinned_message_id"`
}

type ChatParticipant11 struct {
	ChatID              pgtype.UUID                          `json:"chat_id"`
	UserID              pgtype.UUID                          `json:"user_id"`
	ChatType            ChatTypeEnum                         `json:"chat_type"`
	Role                ChatParticipantRoleEnum              `json:"role"`
	PermissionsBitmask  pgtype.Bits                          `json:"permissions_bitmask"`
	JoinedAt            pgtype.Timestamptz                   `json:"joined_at"`
	RejoinedAt          pgtype.Timestamptz                   `json:"rejoined_at"`
	LeftAt              pgtype.Timestamptz                   `json:"left_at"`
	BanReason           NullChatParticipantBanReasonEnum     `json:"ban_reason"`
	BanType             NullChatParticipantBanTypeEnum       `json:"ban_type"`
	BannedBy            pgtype.UUID                          `json:"banned_by"`
	BannedUntil         pgtype.Timestamptz                   `json:"banned_until"`
	BanReasonNote       pgtype.Text                          `json:"ban_reason_note"`
	InvitedBy           pgtype.UUID                          `json:"invited_by"`
	InvitedAt           pgtype.Timestamptz                   `json:"invited_at"`
	MutedUntil          pgtype.Timestamptz                   `json:"muted_until"`
	NotificationLevel   ChatParticipantNotificationLevelEnum `json:"notification_level"`
	CustomNickname      pgtype.Text                          `json:"custom_nickname"`
	ColorTheme          pgtype.Text                          `json:"color_theme"`
	Settings            []byte                               `json:"settings"`
	IsPinned            bool                                 `json:"is_pinned"`
	LastPinnedMessageID pgtype.UUID                          `json:"last_pinned_message_id"`
}

type ChatParticipant12 struct {
	ChatID              pgtype.UUID                          `json:"chat_id"`
	UserID              pgtype.UUID                          `json:"user_id"`
	ChatType            ChatTypeEnum                         `json:"chat_type"`
	Role                ChatParticipantRoleEnum              `json:"role"`
	PermissionsBitmask  pgtype.Bits                          `json:"permissions_bitmask"`
	JoinedAt            pgtype.Timestamptz                   `json:"joined_at"`
	RejoinedAt          pgtype.Timestamptz                   `json:"rejoined_at"`
	LeftAt              pgtype.Timestamptz                   `json:"left_at"`
	BanReason           NullChatParticipantBanReasonEnum     `json:"ban_reason"`
	BanType             NullChatParticipantBanTypeEnum       `json:"ban_type"`
	BannedBy            pgtype.UUID                          `json:"banned_by"`
	BannedUntil         pgtype.Timestamptz                   `json:"banned_until"`
	BanReasonNote       pgtype.Text                          `json:"ban_reason_note"`
	InvitedBy           pgtype.UUID                          `json:"invited_by"`
	InvitedAt           pgtype.Timestamptz                   `json:"invited_at"`
	MutedUntil          pgtype.Timestamptz                   `json:"muted_until"`
	NotificationLevel   ChatParticipantNotificationLevelEnum `json:"notification_level"`
	CustomNickname      pgtype.Text                          `json:"custom_nickname"`
	ColorTheme          pgtype.Text                          `json:"color_theme"`
	Settings            []byte                               `json:"settings"`
	IsPinned            bool                                 `json:"is_pinned"`
	LastPinnedMessageID pgtype.UUID                          `json:"last_pinned_message_id"`
}

type ChatParticipant13 struct {
	ChatID              pgtype.UUID                          `json:"chat_id"`
	UserID              pgtype.UUID                          `json:"user_id"`
	ChatType            ChatTypeEnum                         `json:"chat_type"`
	Role                ChatParticipantRoleEnum              `json:"role"`
	PermissionsBitmask  pgtype.Bits                          `json:"permissions_bitmask"`
	JoinedAt            pgtype.Timestamptz                   `json:"joined_at"`
	RejoinedAt          pgtype.Timestamptz                   `json:"rejoined_at"`
	LeftAt              pgtype.Timestamptz                   `json:"left_at"`
	BanReason           NullChatParticipantBanReasonEnum     `json:"ban_reason"`
	BanType             NullChatParticipantBanTypeEnum       `json:"ban_type"`
	BannedBy            pgtype.UUID                          `json:"banned_by"`
	BannedUntil         pgtype.Timestamptz                   `json:"banned_until"`
	BanReasonNote       pgtype.Text                          `json:"ban_reason_note"`
	InvitedBy           pgtype.UUID                          `json:"invited_by"`
	InvitedAt           pgtype.Timestamptz                   `json:"invited_at"`
	MutedUntil          pgtype.Timestamptz                   `json:"muted_until"`
	NotificationLevel   ChatParticipantNotificationLevelEnum `json:"notification_level"`
	CustomNickname      pgtype.Text                          `json:"custom_nickname"`
	ColorTheme          pgtype.Text                          `json:"color_theme"`
	Settings            []byte                               `json:"settings"`
	IsPinned            bool                                 `json:"is_pinned"`
	LastPinnedMessageID pgtype.UUID                          `json:"last_pinned_message_id"`
}

type ChatParticipant14 struct {
	ChatID              pgtype.UUID                          `json:"chat_id"`
	UserID              pgtype.UUID                          `json:"user_id"`
	ChatType            ChatTypeEnum                         `json:"chat_type"`
	Role                ChatParticipantRoleEnum              `json:"role"`
	PermissionsBitmask  pgtype.Bits                          `json:"permissions_bitmask"`
	JoinedAt            pgtype.Timestamptz                   `json:"joined_at"`
	RejoinedAt          pgtype.Timestamptz                   `json:"rejoined_at"`
	LeftAt              pgtype.Timestamptz                   `json:"left_at"`
	BanReason           NullChatParticipantBanReasonEnum     `json:"ban_reason"`
	BanType             NullChatParticipantBanTypeEnum       `json:"ban_type"`
	BannedBy            pgtype.UUID                          `json:"banned_by"`
	BannedUntil         pgtype.Timestamptz                   `json:"banned_until"`
	BanReasonNote       pgtype.Text                          `json:"ban_reason_note"`
	InvitedBy           pgtype.UUID                          `json:"invited_by"`
	InvitedAt           pgtype.Timestamptz                   `json:"invited_at"`
	MutedUntil          pgtype.Timestamptz                   `json:"muted_until"`
	NotificationLevel   ChatParticipantNotificationLevelEnum `json:"notification_level"`
	CustomNickname      pgtype.Text                          `json:"custom_nickname"`
	ColorTheme          pgtype.Text                          `json:"color_theme"`
	Settings            []byte                               `json:"settings"`
	IsPinned            bool                                 `json:"is_pinned"`
	LastPinnedMessageID pgtype.UUID                          `json:"last_pinned_message_id"`
}

type ChatParticipant15 struct {
	ChatID              pgtype.UUID                          `json:"chat_id"`
	UserID              pgtype.UUID                          `json:"user_id"`
	ChatType            ChatTypeEnum                         `json:"chat_type"`
	Role                ChatParticipantRoleEnum              `json:"role"`
	PermissionsBitmask  pgtype.Bits                          `json:"permissions_bitmask"`
	JoinedAt            pgtype.Timestamptz                   `json:"joined_at"`
	RejoinedAt          pgtype.Timestamptz                   `json:"rejoined_at"`
	LeftAt              pgtype.Timestamptz                   `json:"left_at"`
	BanReason           NullChatParticipantBanReasonEnum     `json:"ban_reason"`
	BanType             NullChatParticipantBanTypeEnum       `json:"ban_type"`
	BannedBy            pgtype.UUID                          `json:"banned_by"`
	BannedUntil         pgtype.Timestamptz                   `json:"banned_until"`
	BanReasonNote       pgtype.Text                          `json:"ban_reason_note"`
	InvitedBy           pgtype.UUID                          `json:"invited_by"`
	InvitedAt           pgtype.Timestamptz                   `json:"invited_at"`
	MutedUntil          pgtype.Timestamptz                   `json:"muted_until"`
	NotificationLevel   ChatParticipantNotificationLevelEnum `json:"notification_level"`
	CustomNickname      pgtype.Text                          `json:"custom_nickname"`
	ColorTheme          pgtype.Text                          `json:"color_theme"`
	Settings            []byte                               `json:"settings"`
	IsPinned            bool                                 `json:"is_pinned"`
	LastPinnedMessageID pgtype.UUID                          `json:"last_pinned_message_id"`
}

type ChatParticipant2 struct {
	ChatID              pgtype.UUID                          `json:"chat_id"`
	UserID              pgtype.UUID                          `json:"user_id"`
	ChatType            ChatTypeEnum                         `json:"chat_type"`
	Role                ChatParticipantRoleEnum              `json:"role"`
	PermissionsBitmask  pgtype.Bits                          `json:"permissions_bitmask"`
	JoinedAt            pgtype.Timestamptz                   `json:"joined_at"`
	RejoinedAt          pgtype.Timestamptz                   `json:"rejoined_at"`
	LeftAt              pgtype.Timestamptz                   `json:"left_at"`
	BanReason           NullChatParticipantBanReasonEnum     `json:"ban_reason"`
	BanType             NullChatParticipantBanTypeEnum       `json:"ban_type"`
	BannedBy            pgtype.UUID                          `json:"banned_by"`
	BannedUntil         pgtype.Timestamptz                   `json:"banned_until"`
	BanReasonNote       pgtype.Text                          `json:"ban_reason_note"`
	InvitedBy           pgtype.UUID                          `json:"invited_by"`
	InvitedAt           pgtype.Timestamptz                   `json:"invited_at"`
	MutedUntil          pgtype.Timestamptz                   `json:"muted_until"`
	NotificationLevel   ChatParticipantNotificationLevelEnum `json:"notification_level"`
	CustomNickname      pgtype.Text                          `json:"custom_nickname"`
	ColorTheme          pgtype.Text                          `json:"color_theme"`
	Settings            []byte                               `json:"settings"`
	IsPinned            bool                                 `json:"is_pinned"`
	LastPinnedMessageID pgtype.UUID                          `json:"last_pinned_message_id"`
}

type ChatParticipant3 struct {
	ChatID              pgtype.UUID                          `json:"chat_id"`
	UserID              pgtype.UUID                          `json:"user_id"`
	ChatType            ChatTypeEnum                         `json:"chat_type"`
	Role                ChatParticipantRoleEnum              `json:"role"`
	PermissionsBitmask  pgtype.Bits                          `json:"permissions_bitmask"`
	JoinedAt            pgtype.Timestamptz                   `json:"joined_at"`
	RejoinedAt          pgtype.Timestamptz                   `json:"rejoined_at"`
	LeftAt              pgtype.Timestamptz                   `json:"left_at"`
	BanReason           NullChatParticipantBanReasonEnum     `json:"ban_reason"`
	BanType             NullChatParticipantBanTypeEnum       `json:"ban_type"`
	BannedBy            pgtype.UUID                          `json:"banned_by"`
	BannedUntil         pgtype.Timestamptz                   `json:"banned_until"`
	BanReasonNote       pgtype.Text                          `json:"ban_reason_note"`
	InvitedBy           pgtype.UUID                          `json:"invited_by"`
	InvitedAt           pgtype.Timestamptz                   `json:"invited_at"`
	MutedUntil          pgtype.Timestamptz                   `json:"muted_until"`
	NotificationLevel   ChatParticipantNotificationLevelEnum `json:"notification_level"`
	CustomNickname      pgtype.Text                          `json:"custom_nickname"`
	ColorTheme          pgtype.Text                          `json:"color_theme"`
	Settings            []byte                               `json:"settings"`
	IsPinned            bool                                 `json:"is_pinned"`
	LastPinnedMessageID pgtype.UUID                          `json:"last_pinned_message_id"`
}

type ChatParticipant4 struct {
	ChatID              pgtype.UUID                          `json:"chat_id"`
	UserID              pgtype.UUID                          `json:"user_id"`
	ChatType            ChatTypeEnum                         `json:"chat_type"`
	Role                ChatParticipantRoleEnum              `json:"role"`
	PermissionsBitmask  pgtype.Bits                          `json:"permissions_bitmask"`
	JoinedAt            pgtype.Timestamptz                   `json:"joined_at"`
	RejoinedAt          pgtype.Timestamptz                   `json:"rejoined_at"`
	LeftAt              pgtype.Timestamptz                   `json:"left_at"`
	BanReason           NullChatParticipantBanReasonEnum     `json:"ban_reason"`
	BanType             NullChatParticipantBanTypeEnum       `json:"ban_type"`
	BannedBy            pgtype.UUID                          `json:"banned_by"`
	BannedUntil         pgtype.Timestamptz                   `json:"banned_until"`
	BanReasonNote       pgtype.Text                          `json:"ban_reason_note"`
	InvitedBy           pgtype.UUID                          `json:"invited_by"`
	InvitedAt           pgtype.Timestamptz                   `json:"invited_at"`
	MutedUntil          pgtype.Timestamptz                   `json:"muted_until"`
	NotificationLevel   ChatParticipantNotificationLevelEnum `json:"notification_level"`
	CustomNickname      pgtype.Text                          `json:"custom_nickname"`
	ColorTheme          pgtype.Text                          `json:"color_theme"`
	Settings            []byte                               `json:"settings"`
	IsPinned            bool                                 `json:"is_pinned"`
	LastPinnedMessageID pgtype.UUID                          `json:"last_pinned_message_id"`
}

type ChatParticipant5 struct {
	ChatID              pgtype.UUID                          `json:"chat_id"`
	UserID              pgtype.UUID                          `json:"user_id"`
	ChatType            ChatTypeEnum                         `json:"chat_type"`
	Role                ChatParticipantRoleEnum              `json:"role"`
	PermissionsBitmask  pgtype.Bits                          `json:"permissions_bitmask"`
	JoinedAt            pgtype.Timestamptz                   `json:"joined_at"`
	RejoinedAt          pgtype.Timestamptz                   `json:"rejoined_at"`
	LeftAt              pgtype.Timestamptz                   `json:"left_at"`
	BanReason           NullChatParticipantBanReasonEnum     `json:"ban_reason"`
	BanType             NullChatParticipantBanTypeEnum       `json:"ban_type"`
	BannedBy            pgtype.UUID                          `json:"banned_by"`
	BannedUntil         pgtype.Timestamptz                   `json:"banned_until"`
	BanReasonNote       pgtype.Text                          `json:"ban_reason_note"`
	InvitedBy           pgtype.UUID                          `json:"invited_by"`
	InvitedAt           pgtype.Timestamptz                   `json:"invited_at"`
	MutedUntil          pgtype.Timestamptz                   `json:"muted_until"`
	NotificationLevel   ChatParticipantNotificationLevelEnum `json:"notification_level"`
	CustomNickname      pgtype.Text                          `json:"custom_nickname"`
	ColorTheme          pgtype.Text                          `json:"color_theme"`
	Settings            []byte                               `json:"settings"`
	IsPinned            bool                                 `json:"is_pinned"`
	LastPinnedMessageID pgtype.UUID                          `json:"last_pinned_message_id"`
}

type ChatParticipant6 struct {
	ChatID              pgtype.UUID                          `json:"chat_id"`
	UserID              pgtype.UUID                          `json:"user_id"`
	ChatType            ChatTypeEnum                         `json:"chat_type"`
	Role                ChatParticipantRoleEnum              `json:"role"`
	PermissionsBitmask  pgtype.Bits                          `json:"permissions_bitmask"`
	JoinedAt            pgtype.Timestamptz                   `json:"joined_at"`
	RejoinedAt          pgtype.Timestamptz                   `json:"rejoined_at"`
	LeftAt              pgtype.Timestamptz                   `json:"left_at"`
	BanReason           NullChatParticipantBanReasonEnum     `json:"ban_reason"`
	BanType             NullChatParticipantBanTypeEnum       `json:"ban_type"`
	BannedBy            pgtype.UUID                          `json:"banned_by"`
	BannedUntil         pgtype.Timestamptz                   `json:"banned_until"`
	BanReasonNote       pgtype.Text                          `json:"ban_reason_note"`
	InvitedBy           pgtype.UUID                          `json:"invited_by"`
	InvitedAt           pgtype.Timestamptz                   `json:"invited_at"`
	MutedUntil          pgtype.Timestamptz                   `json:"muted_until"`
	NotificationLevel   ChatParticipantNotificationLevelEnum `json:"notification_level"`
	CustomNickname      pgtype.Text                          `json:"custom_nickname"`
	ColorTheme          pgtype.Text                          `json:"color_theme"`
	Settings            []byte                               `json:"settings"`
	IsPinned            bool                                 `json:"is_pinned"`
	LastPinnedMessageID pgtype.UUID                          `json:"last_pinned_message_id"`
}

type ChatParticipant7 struct {
	ChatID              pgtype.UUID                          `json:"chat_id"`
	UserID              pgtype.UUID                          `json:"user_id"`
	ChatType            ChatTypeEnum                         `json:"chat_type"`
	Role                ChatParticipantRoleEnum              `json:"role"`
	PermissionsBitmask  pgtype.Bits                          `json:"permissions_bitmask"`
	JoinedAt            pgtype.Timestamptz                   `json:"joined_at"`
	RejoinedAt          pgtype.Timestamptz                   `json:"rejoined_at"`
	LeftAt              pgtype.Timestamptz                   `json:"left_at"`
	BanReason           NullChatParticipantBanReasonEnum     `json:"ban_reason"`
	BanType             NullChatParticipantBanTypeEnum       `json:"ban_type"`
	BannedBy            pgtype.UUID                          `json:"banned_by"`
	BannedUntil         pgtype.Timestamptz                   `json:"banned_until"`
	BanReasonNote       pgtype.Text                          `json:"ban_reason_note"`
	InvitedBy           pgtype.UUID                          `json:"invited_by"`
	InvitedAt           pgtype.Timestamptz                   `json:"invited_at"`
	MutedUntil          pgtype.Timestamptz                   `json:"muted_until"`
	NotificationLevel   ChatParticipantNotificationLevelEnum `json:"notification_level"`
	CustomNickname      pgtype.Text                          `json:"custom_nickname"`
	ColorTheme          pgtype.Text                          `json:"color_theme"`
	Settings            []byte                               `json:"settings"`
	IsPinned            bool                                 `json:"is_pinned"`
	LastPinnedMessageID pgtype.UUID                          `json:"last_pinned_message_id"`
}

type ChatParticipant8 struct {
	ChatID              pgtype.UUID                          `json:"chat_id"`
	UserID              pgtype.UUID                          `json:"user_id"`
	ChatType            ChatTypeEnum                         `json:"chat_type"`
	Role                ChatParticipantRoleEnum              `json:"role"`
	PermissionsBitmask  pgtype.Bits                          `json:"permissions_bitmask"`
	JoinedAt            pgtype.Timestamptz                   `json:"joined_at"`
	RejoinedAt          pgtype.Timestamptz                   `json:"rejoined_at"`
	LeftAt              pgtype.Timestamptz                   `json:"left_at"`
	BanReason           NullChatParticipantBanReasonEnum     `json:"ban_reason"`
	BanType             NullChatParticipantBanTypeEnum       `json:"ban_type"`
	BannedBy            pgtype.UUID                          `json:"banned_by"`
	BannedUntil         pgtype.Timestamptz                   `json:"banned_until"`
	BanReasonNote       pgtype.Text                          `json:"ban_reason_note"`
	InvitedBy           pgtype.UUID                          `json:"invited_by"`
	InvitedAt           pgtype.Timestamptz                   `json:"invited_at"`
	MutedUntil          pgtype.Timestamptz                   `json:"muted_until"`
	NotificationLevel   ChatParticipantNotificationLevelEnum `json:"notification_level"`
	CustomNickname      pgtype.Text                          `json:"custom_nickname"`
	ColorTheme          pgtype.Text                          `json:"color_theme"`
	Settings            []byte                               `json:"settings"`
	IsPinned            bool                                 `json:"is_pinned"`
	LastPinnedMessageID pgtype.UUID                          `json:"last_pinned_message_id"`
}

type ChatParticipant9 struct {
	ChatID              pgtype.UUID                          `json:"chat_id"`
	UserID              pgtype.UUID                          `json:"user_id"`
	ChatType            ChatTypeEnum                         `json:"chat_type"`
	Role                ChatParticipantRoleEnum              `json:"role"`
	PermissionsBitmask  pgtype.Bits                          `json:"permissions_bitmask"`
	JoinedAt            pgtype.Timestamptz                   `json:"joined_at"`
	RejoinedAt          pgtype.Timestamptz                   `json:"rejoined_at"`
	LeftAt              pgtype.Timestamptz                   `json:"left_at"`
	BanReason           NullChatParticipantBanReasonEnum     `json:"ban_reason"`
	BanType             NullChatParticipantBanTypeEnum       `json:"ban_type"`
	BannedBy            pgtype.UUID                          `json:"banned_by"`
	BannedUntil         pgtype.Timestamptz                   `json:"banned_until"`
	BanReasonNote       pgtype.Text                          `json:"ban_reason_note"`
	InvitedBy           pgtype.UUID                          `json:"invited_by"`
	InvitedAt           pgtype.Timestamptz                   `json:"invited_at"`
	MutedUntil          pgtype.Timestamptz                   `json:"muted_until"`
	NotificationLevel   ChatParticipantNotificationLevelEnum `json:"notification_level"`
	CustomNickname      pgtype.Text                          `json:"custom_nickname"`
	ColorTheme          pgtype.Text                          `json:"color_theme"`
	Settings            []byte                               `json:"settings"`
	IsPinned            bool                                 `json:"is_pinned"`
	LastPinnedMessageID pgtype.UUID                          `json:"last_pinned_message_id"`
}

type ChattingDevice struct {
	ID          int64                  `json:"id"`
	UserID      pgtype.UUID            `json:"user_id"`
	Name        string                 `json:"name"`
	Role        ChattingDeviceRoleEnum `json:"role"`
	Fingerprint []byte                 `json:"fingerprint"`
	CreatedAt   pgtype.Timestamptz     `json:"created_at"`
	LastSeenAt  pgtype.Timestamptz     `json:"last_seen_at"`
	ExpiresAt   pgtype.Timestamptz     `json:"expires_at"`
}

type ChattingDeviceRolePolicy struct {
	Role           ChattingDeviceRoleEnum `json:"role"`
	ExpiryInterval pgtype.Interval        `json:"expiry_interval"`
}

type DeviceSignalKey struct {
	DeviceID              int64              `json:"device_id"`
	UserID                pgtype.UUID        `json:"user_id"`
	IdentityKey           []byte             `json:"identity_key"`
	SignedPreKeyID        int16              `json:"signed_pre_key_id"`
	SignedPreKey          []byte             `json:"signed_pre_key"`
	SignedPreKeySignature []byte             `json:"signed_pre_key_signature"`
	CreatedAt             pgtype.Timestamptz `json:"created_at"`
	LastRefilledAt        pgtype.Timestamptz `json:"last_refilled_at"`
}

type OneTimePreKey struct {
	ID        int64              `json:"id"`
	DeviceID  int64              `json:"device_id"`
	PublicKey []byte             `json:"public_key"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
}

type OneTimePreKeyRateLimit struct {
	UserID       pgtype.UUID        `json:"user_id"`
	Tokens       float64            `json:"tokens"`
	LastRefillTs pgtype.Timestamptz `json:"last_refill_ts"`
}

type Session struct {
	ID               int64              `json:"id"`
	UserID           pgtype.UUID        `json:"user_id"`
	RefreshTokenHash []byte             `json:"refresh_token_hash"`
	RefreshCount     int16              `json:"refresh_count"`
	CreatedAt        pgtype.Timestamptz `json:"created_at"`
	ExpiresAt        pgtype.Timestamptz `json:"expires_at"`
	Ip               netip.Addr         `json:"ip"`
	Geo              interface{}        `json:"geo"`
	UserAgent        pgtype.Text        `json:"user_agent"`
	Device           []byte             `json:"device"`
}

type SessionPmanTmpl struct {
	ID               int64              `json:"id"`
	UserID           pgtype.UUID        `json:"user_id"`
	RefreshTokenHash []byte             `json:"refresh_token_hash"`
	RefreshCount     int16              `json:"refresh_count"`
	CreatedAt        pgtype.Timestamptz `json:"created_at"`
	ExpiresAt        pgtype.Timestamptz `json:"expires_at"`
	Ip               netip.Addr         `json:"ip"`
	Geo              interface{}        `json:"geo"`
	UserAgent        pgtype.Text        `json:"user_agent"`
	Device           []byte             `json:"device"`
}

type User struct {
	ID                pgtype.UUID        `json:"id"`
	Email             string             `json:"email"`
	PasswordHash      string             `json:"password_hash"`
	PasswordAlgo      int16              `json:"password_algo"`
	PasswordUpdatedAt pgtype.Timestamptz `json:"password_updated_at"`
	Name              string             `json:"name"`
	LastLoginAt       pgtype.Timestamptz `json:"last_login_at"`
	LastActiveAt      pgtype.Timestamptz `json:"last_active_at"`
	CreatedAt         pgtype.Timestamptz `json:"created_at"`
}

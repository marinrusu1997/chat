// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: queries.sql

package gen

import (
	"context"
)

const createUser = `-- name: CreateUser :one


INSERT INTO "user" (
    email,
    password_hash,
    password_algo,
    name
) VALUES ($1, $2, $3, $4)
RETURNING id, email, password_hash, password_algo, password_updated_at, name, last_login_at, last_active_at, created_at
`

type CreateUserParams struct {
	Email        string `json:"email"`
	PasswordHash string `json:"password_hash"`
	PasswordAlgo int16  `json:"password_algo"`
	Name         string `json:"name"`
}

// queries.sql
// --
// User Management
// --
func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Email,
		arg.PasswordHash,
		arg.PasswordAlgo,
		arg.Name,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PasswordHash,
		&i.PasswordAlgo,
		&i.PasswordUpdatedAt,
		&i.Name,
		&i.LastLoginAt,
		&i.LastActiveAt,
		&i.CreatedAt,
	)
	return i, err
}

const deleteUserByEmail = `-- name: DeleteUserByEmail :exec
DELETE FROM "user" WHERE email = $1
`

func (q *Queries) DeleteUserByEmail(ctx context.Context, email string) error {
	_, err := q.db.Exec(ctx, deleteUserByEmail, email)
	return err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, email, password_hash, password_algo, password_updated_at, name, last_login_at, last_active_at, created_at FROM "user" WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PasswordHash,
		&i.PasswordAlgo,
		&i.PasswordUpdatedAt,
		&i.Name,
		&i.LastLoginAt,
		&i.LastActiveAt,
		&i.CreatedAt,
	)
	return i, err
}
